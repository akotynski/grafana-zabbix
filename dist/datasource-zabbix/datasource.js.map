{"version":3,"sources":["../../src/datasource-zabbix/datasource.js"],"names":["bindFunctionDefs","functionDefs","category","aggregationFunctions","_","map","metricFunctions","getCategories","aggFuncDefs","filter","func","includes","def","name","funcInstance","createFuncInstance","params","bindFunction","dataProcessor","getConsolidateBy","target","consolidateBy","funcDef","find","functions","length","downsampleSeries","timeseries_data","options","defaultAgg","consolidateByFunc","timeseries","datapoints","maxDataPoints","groupBy","interval","formatMetric","metricObj","text","expandable","zabbixTemplateFormat","value","utils","escapeRegex","escapedValues","join","zabbixItemIdsTemplateFormat","replaceTemplateVars","templateSrv","scopedVars","replacedTarget","replace","isRegex","sequence","funcsArray","result","i","call","filterEnabledTargets","targets","hide","group","host","item","getTriggerThreshold","expression","thresholdPattern","finded_thresholds","match","threshold","Number","dateMath","migrations","c","responseHandler","ZabbixAPIError","ZabbixAPIDatasource","instanceSettings","alertSrv","dashboardSrv","zabbixAlertingSrv","Zabbix","partial","url","basicAuth","withCredentials","jsonData","username","password","trends","trendsFrom","trendsRange","ttl","cacheTTL","parseInterval","alertingEnabled","alerting","addThresholds","alertingMinSeverity","SEV_WARNING","dbConnectionOptions","dbConnection","enableDirectDBConnection","enable","sqlDatasourceId","datasourceId","zabbixOptions","zabbix","alertQuery","then","setPanelAlertState","panelId","alert","state","removeZabbixThreshold","forEach","thresholds","setPanelThreshold","promises","t","timeFrom","Math","ceil","parse","range","from","timeTo","to","cloneDeep","replaceTargetVariables","timeFunctions","time_from","time_to","timeRange","useTrends","isUseTrends","mode","MODE_METRICS","MODE_TEXT","migrate","queryNumericData","queryTextData","MODE_ITEMID","itemids","queryItemIdData","MODE_ITSERVICE","queryITServiceData","MODE_TRIGGERS","queryTriggersData","Promise","all","flatten","data","getItemOptions","itemtype","getItemsFromTarget","queryNumericDataForItems","items","getHistoryPromise","getTrendsDB","dbConnector","handleGrafanaTSResponse","history","valueType","getTrendValueType","getTrend","handleTrends","series","sortBy","point","DATAPOINT_TS","getHistoryDB","getHistory","handleHistory","applyDataProcessingFunctions","catch","console","log","error","trendFunctions","trendValueFunc","transformFunctions","filterFunctions","aliasFunctions","dp","aggFuncNames","lastAgg","findLast","applyTimeShiftFunction","timeShiftFunc","shift","unShiftTimeSeries","resultFormat","handleHistoryAsTable","handleText","resolve","split","itemid","trim","getItemsByIDs","itservice","itServiceFilter","slaProperty","itServiceIds","itServices","isOldVersion","getITServices","itservices","serviceid","getSLA","serviceids","handleSLAResponse","slaResponse","getHostsFromTarget","results","hosts","apps","hostids","appids","minSeverity","triggers","acknowledged","count","getHostAlerts","handleTriggersResponse","zabbixVersion","getVersion","version","login","testSQLDataSource","status","title","message","query","parts","each","splitTemplateQuery","part","push","template","zipObject","app","getItems","getApps","getHosts","getGroups","metrics","rangeRaw","annotation","showOkEvents","SHOW_ALL_EVENTS","SHOW_OK_EVENTS","triggersOptions","showTriggers","SHOW_ALL_TRIGGERS","hideHostsInMaintenance","getTriggers","application","triggerName","trigger","buildRegex","test","description","priority","minseverity","objectids","getEvents","indexedTriggers","keyBy","hideAcknowledged","events","event","acknowledges","tags","showHostname","formatted_acknowledges","formatAcknowledges","time","clock","objectid","enabled_targets","getPanelItems","getAlerts","firedTriggers","p","textFilter","param","toString","useTrendsFrom","useTrendsRange","contains","indexBy"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from 'lodash';\nimport * as dateMath from 'app/core/utils/datemath';\nimport * as utils from './utils';\nimport * as migrations from './migrations';\nimport * as metricFunctions from './metricFunctions';\nimport * as c from './constants';\nimport dataProcessor from './dataProcessor';\nimport responseHandler from './responseHandler';\nimport './zabbix.js';\nimport './zabbixAlerting.service.js';\nimport {ZabbixAPIError} from './zabbixAPICore.service.js';\n\nclass ZabbixAPIDatasource {\n\n  /** @ngInject */\n  constructor(instanceSettings, templateSrv, alertSrv, dashboardSrv, zabbixAlertingSrv, Zabbix) {\n    this.templateSrv = templateSrv;\n    this.alertSrv = alertSrv;\n    this.dashboardSrv = dashboardSrv;\n    this.zabbixAlertingSrv = zabbixAlertingSrv;\n\n    // Use custom format for template variables\n    this.replaceTemplateVars = _.partial(replaceTemplateVars, this.templateSrv);\n\n    // General data source settings\n    this.name             = instanceSettings.name;\n    this.url              = instanceSettings.url;\n    this.basicAuth        = instanceSettings.basicAuth;\n    this.withCredentials  = instanceSettings.withCredentials;\n\n    const jsonData = instanceSettings.jsonData;\n\n    // Zabbix API credentials\n    this.username         = jsonData.username;\n    this.password         = jsonData.password;\n\n    // Use trends instead history since specified time\n    this.trends           = jsonData.trends;\n    this.trendsFrom       = jsonData.trendsFrom || '7d';\n    this.trendsRange      = jsonData.trendsRange || '4d';\n\n    // Set cache update interval\n    var ttl = jsonData.cacheTTL || '1h';\n    this.cacheTTL = utils.parseInterval(ttl);\n\n    // Alerting options\n    this.alertingEnabled =     jsonData.alerting;\n    this.addThresholds =       jsonData.addThresholds;\n    this.alertingMinSeverity = jsonData.alertingMinSeverity || c.SEV_WARNING;\n\n    // Direct DB Connection options\n    let dbConnectionOptions = jsonData.dbConnection || {};\n    this.enableDirectDBConnection = dbConnectionOptions.enable;\n    this.sqlDatasourceId = dbConnectionOptions.datasourceId;\n\n    let zabbixOptions = {\n      username: this.username,\n      password: this.password,\n      basicAuth: this.basicAuth,\n      withCredentials: this.withCredentials,\n      cacheTTL: this.cacheTTL,\n      enableDirectDBConnection: this.enableDirectDBConnection,\n      sqlDatasourceId: this.sqlDatasourceId\n    };\n\n    this.zabbix = new Zabbix(this.url, zabbixOptions);\n  }\n\n  ////////////////////////\n  // Datasource methods //\n  ////////////////////////\n\n  /**\n   * Query panel data. Calls for each panel in dashboard.\n   * @param  {Object} options   Contains time range, targets and other info.\n   * @return {Object} Grafana metrics object with timeseries data for each target.\n   */\n  query(options) {\n    // Get alerts for current panel\n    if (this.alertingEnabled) {\n      this.alertQuery(options).then(alert => {\n        this.zabbixAlertingSrv.setPanelAlertState(options.panelId, alert.state);\n\n        this.zabbixAlertingSrv.removeZabbixThreshold(options.panelId);\n        if (this.addThresholds) {\n          _.forEach(alert.thresholds, threshold => {\n            this.zabbixAlertingSrv.setPanelThreshold(options.panelId, threshold);\n          });\n        }\n      });\n    }\n\n    // Create request for each target\n    let promises = _.map(options.targets, t => {\n      // Don't request undefined and hidden targets\n      if (t.hide) {\n        return [];\n      }\n\n      let timeFrom = Math.ceil(dateMath.parse(options.range.from) / 1000);\n      let timeTo = Math.ceil(dateMath.parse(options.range.to) / 1000);\n\n      // Prevent changes of original object\n      let target = _.cloneDeep(t);\n      this.replaceTargetVariables(target, options);\n\n      // Apply Time-related functions (timeShift(), etc)\n      let timeFunctions = bindFunctionDefs(target.functions, 'Time');\n      if (timeFunctions.length) {\n        const [time_from, time_to] = sequence(timeFunctions)([timeFrom, timeTo]);\n        timeFrom = time_from;\n        timeTo = time_to;\n      }\n      let timeRange = [timeFrom, timeTo];\n\n      let useTrends = this.isUseTrends(timeRange);\n\n      // Metrics or Text query mode\n      if (!target.mode || target.mode === c.MODE_METRICS || target.mode === c.MODE_TEXT) {\n        // Migrate old targets\n        target = migrations.migrate(target);\n\n        // Don't request undefined and hidden targets\n        if (target.hide || !target.group || !target.host || !target.item) {\n          return [];\n        }\n\n        if (!target.mode || target.mode === c.MODE_METRICS) {\n          return this.queryNumericData(target, timeRange, useTrends, options);\n        } else if (target.mode === c.MODE_TEXT) {\n          return this.queryTextData(target, timeRange);\n        }\n      } else if (target.mode === c.MODE_ITEMID) {\n        // Item ID mode\n        if (!target.itemids) {\n          return [];\n        }\n        return this.queryItemIdData(target, timeRange, useTrends, options);\n      } else if (target.mode === c.MODE_ITSERVICE) {\n        // IT services mode\n        return this.queryITServiceData(target, timeRange, options);\n      } else if (target.mode === c.MODE_TRIGGERS) {\n        // Triggers mode\n        return this.queryTriggersData(target, timeRange);\n      } else {\n        return [];\n      }\n    });\n\n    // Data for panel (all targets)\n    return Promise.all(_.flatten(promises))\n      .then(_.flatten)\n      .then(data => {\n        return { data: data };\n      });\n  }\n\n  /**\n   * Query target data for Metrics mode\n   */\n  queryNumericData(target, timeRange, useTrends, options) {\n    let getItemOptions = {\n      itemtype: 'num'\n    };\n    return this.zabbix.getItemsFromTarget(target, getItemOptions)\n    .then(items => {\n      return this.queryNumericDataForItems(items, target, timeRange, useTrends, options);\n    });\n  }\n\n  /**\n   * Query history for numeric items\n   */\n  queryNumericDataForItems(items, target, timeRange, useTrends, options) {\n    let [timeFrom, timeTo] = timeRange;\n    let getHistoryPromise;\n    options.consolidateBy = getConsolidateBy(target);\n\n    if (useTrends) {\n      if (this.enableDirectDBConnection) {\n        getHistoryPromise = this.zabbix.getTrendsDB(items, timeFrom, timeTo, options)\n        .then(history => this.zabbix.dbConnector.handleGrafanaTSResponse(history, items));\n      } else {\n        let valueType = this.getTrendValueType(target);\n        getHistoryPromise = this.zabbix.getTrend(items, timeFrom, timeTo)\n        .then(history => responseHandler.handleTrends(history, items, valueType))\n        .then(timeseries => {\n          // Sort trend data, issue #202\n          _.forEach(timeseries, series => {\n            series.datapoints = _.sortBy(series.datapoints, point => point[c.DATAPOINT_TS]);\n          });\n          return timeseries;\n        });\n      }\n    } else {\n      // Use history\n      if (this.enableDirectDBConnection) {\n        getHistoryPromise = this.zabbix.getHistoryDB(items, timeFrom, timeTo, options)\n        .then(history => this.zabbix.dbConnector.handleGrafanaTSResponse(history, items));\n      } else {\n        getHistoryPromise = this.zabbix.getHistory(items, timeFrom, timeTo)\n        .then(history => responseHandler.handleHistory(history, items));\n      }\n    }\n\n    return getHistoryPromise\n    .then(timeseries => this.applyDataProcessingFunctions(timeseries, target))\n    .then(timeseries => downsampleSeries(timeseries, options))\n    .catch(error => {\n      console.log(error);\n      return [];\n    });\n  }\n\n  getTrendValueType(target) {\n    // Find trendValue() function and get specified trend value\n    var trendFunctions = _.map(metricFunctions.getCategories()['Trends'], 'name');\n    var trendValueFunc = _.find(target.functions, func => {\n      return _.includes(trendFunctions, func.def.name);\n    });\n    return trendValueFunc ? trendValueFunc.params[0] : \"avg\";\n  }\n\n  applyDataProcessingFunctions(timeseries_data, target) {\n    let transformFunctions   = bindFunctionDefs(target.functions, 'Transform');\n    let aggregationFunctions = bindFunctionDefs(target.functions, 'Aggregate');\n    let filterFunctions      = bindFunctionDefs(target.functions, 'Filter');\n    let aliasFunctions       = bindFunctionDefs(target.functions, 'Alias');\n\n    // Apply transformation functions\n    timeseries_data = _.cloneDeep(_.map(timeseries_data, timeseries => {\n      timeseries.datapoints = sequence(transformFunctions)(timeseries.datapoints);\n      return timeseries;\n    }));\n\n    // Apply filter functions\n    if (filterFunctions.length) {\n      timeseries_data = sequence(filterFunctions)(timeseries_data);\n    }\n\n    // Apply aggregations\n    if (aggregationFunctions.length) {\n      let dp = _.map(timeseries_data, 'datapoints');\n      dp = sequence(aggregationFunctions)(dp);\n\n      let aggFuncNames = _.map(metricFunctions.getCategories()['Aggregate'], 'name');\n      let lastAgg = _.findLast(target.functions, func => {\n        return _.includes(aggFuncNames, func.def.name);\n      });\n\n      timeseries_data = [{\n        target: lastAgg.text,\n        datapoints: dp\n      }];\n    }\n\n    // Apply alias functions\n    _.forEach(timeseries_data, sequence(aliasFunctions));\n\n    // Apply Time-related functions (timeShift(), etc)\n    // Find timeShift() function and get specified trend value\n    this.applyTimeShiftFunction(timeseries_data, target);\n\n    return timeseries_data;\n  }\n\n  applyTimeShiftFunction(timeseries_data, target) {\n    // Find timeShift() function and get specified interval\n    let timeShiftFunc = _.find(target.functions, (func) => {\n      return func.def.name === 'timeShift';\n    });\n    if (timeShiftFunc) {\n      let shift = timeShiftFunc.params[0];\n      _.forEach(timeseries_data, (series) => {\n        series.datapoints = dataProcessor.unShiftTimeSeries(shift, series.datapoints);\n      });\n    }\n  }\n\n  /**\n   * Query target data for Text mode\n   */\n  queryTextData(target, timeRange) {\n    let [timeFrom, timeTo] = timeRange;\n    let options = {\n      itemtype: 'text'\n    };\n    return this.zabbix.getItemsFromTarget(target, options)\n      .then(items => {\n        if (items.length) {\n          return this.zabbix.getHistory(items, timeFrom, timeTo)\n          .then(history => {\n            if (target.resultFormat === 'table') {\n              return responseHandler.handleHistoryAsTable(history, items, target);\n            } else {\n              return responseHandler.handleText(history, items, target);\n            }\n          });\n        } else {\n          return Promise.resolve([]);\n        }\n      });\n  }\n\n  /**\n   * Query target data for Item ID mode\n   */\n  queryItemIdData(target, timeRange, useTrends, options) {\n    let itemids = target.itemids;\n    itemids = this.templateSrv.replace(itemids, options.scopedVars, zabbixItemIdsTemplateFormat);\n    itemids = _.map(itemids.split(','), itemid => itemid.trim());\n\n    if (!itemids) {\n      return [];\n    }\n\n    return this.zabbix.getItemsByIDs(itemids)\n    .then(items => {\n      return this.queryNumericDataForItems(items, target, timeRange, useTrends, options);\n    });\n  }\n\n  /**\n   * Query target data for IT Services mode\n   */\n  queryITServiceData(target, timeRange, options) {\n    // Don't show undefined and hidden targets\n    if (target.hide || (!target.itservice && !target.itServiceFilter) || !target.slaProperty) {\n      return [];\n    }\n\n    let itServiceIds = [];\n    let itServices = [];\n    let itServiceFilter;\n    let isOldVersion = target.itservice && !target.itServiceFilter;\n\n    if (isOldVersion) {\n      // Backward compatibility\n      itServiceFilter = '/.*/';\n    } else {\n      itServiceFilter = this.replaceTemplateVars(target.itServiceFilter, options.scopedVars);\n    }\n\n    return this.zabbix.getITServices(itServiceFilter)\n    .then(itservices => {\n      itServices = itservices;\n      if (isOldVersion) {\n        itServices = _.filter(itServices, {'serviceid': target.itservice.serviceid});\n      }\n\n      itServiceIds = _.map(itServices, 'serviceid');\n      return itServiceIds;\n    })\n    .then(serviceids => {\n      return this.zabbix.getSLA(serviceids, timeRange);\n    })\n    .then(slaResponse => {\n      return _.map(itServiceIds, serviceid => {\n        let itservice = _.find(itServices, {'serviceid': serviceid});\n        return responseHandler.handleSLAResponse(itservice, target.slaProperty, slaResponse);\n      });\n    });\n  }\n\n  queryTriggersData(target, timeRange) {\n    let [timeFrom, timeTo] = timeRange;\n    return this.zabbix.getHostsFromTarget(target)\n    .then((results) => {\n      let [hosts, apps] = results;\n      if (hosts.length) {\n        let hostids = _.map(hosts, 'hostid');\n        let appids = _.map(apps, 'applicationid');\n        let options = {\n          minSeverity: target.triggers.minSeverity,\n          acknowledged: target.triggers.acknowledged,\n          count: target.triggers.count,\n          timeFrom: timeFrom,\n          timeTo: timeTo\n        };\n        return this.zabbix.getHostAlerts(hostids, appids, options)\n        .then((triggers) => {\n          return responseHandler.handleTriggersResponse(triggers, timeRange);\n        });\n      } else {\n        return Promise.resolve([]);\n      }\n    });\n  }\n\n  /**\n   * Test connection to Zabbix API\n   * @return {object} Connection status and Zabbix API version\n   */\n  testDatasource() {\n    let zabbixVersion;\n    return this.zabbix.getVersion()\n    .then(version => {\n      zabbixVersion = version;\n      return this.zabbix.login();\n    })\n    .then(() => {\n      if (this.enableDirectDBConnection) {\n        return this.zabbix.dbConnector.testSQLDataSource();\n      } else {\n        return Promise.resolve();\n      }\n    })\n    .then(() => {\n      return {\n        status: \"success\",\n        title: \"Success\",\n        message: \"Zabbix API version: \" + zabbixVersion\n      };\n    })\n    .catch(error => {\n      if (error instanceof ZabbixAPIError) {\n        return {\n          status: \"error\",\n          title: error.message,\n          message: error.message\n        };\n      } else if (error.data && error.data.message) {\n        return {\n          status: \"error\",\n          title: \"Connection failed\",\n          message: \"Connection failed: \" + error.data.message\n        };\n      } else {\n        return {\n          status: \"error\",\n          title: \"Connection failed\",\n          message: \"Could not connect to given url\"\n        };\n      }\n    });\n  }\n\n  ////////////////\n  // Templating //\n  ////////////////\n\n  /**\n   * Find metrics from templated request.\n   *\n   * @param  {string} query Query from Templating\n   * @return {string}       Metric name - group, host, app or item or list\n   *                        of metrics in \"{metric1,metcic2,...,metricN}\" format.\n   */\n  metricFindQuery(query) {\n    let result;\n    let parts = [];\n\n    // Split query. Query structure: group.host.app.item\n    _.each(utils.splitTemplateQuery(query), part => {\n      part = this.replaceTemplateVars(part, {});\n\n      // Replace wildcard to regex\n      if (part === '*') {\n        part = '/.*/';\n      }\n      parts.push(part);\n    });\n    let template = _.zipObject(['group', 'host', 'app', 'item'], parts);\n\n    // Get items\n    if (parts.length === 4) {\n      // Search for all items, even it's not belong to any application\n      if (template.app === '/.*/') {\n        template.app = '';\n      }\n      result = this.zabbix.getItems(template.group, template.host, template.app, template.item);\n    } else if (parts.length === 3) {\n      // Get applications\n      result = this.zabbix.getApps(template.group, template.host, template.app);\n    } else if (parts.length === 2) {\n      // Get hosts\n      result = this.zabbix.getHosts(template.group, template.host);\n    } else if (parts.length === 1) {\n      // Get groups\n      result = this.zabbix.getGroups(template.group);\n    } else {\n      result = Promise.resolve([]);\n    }\n\n    return result.then(metrics => {\n      return _.map(metrics, formatMetric);\n    });\n  }\n\n  /////////////////\n  // Annotations //\n  /////////////////\n\n  annotationQuery(options) {\n    var timeFrom = Math.ceil(dateMath.parse(options.rangeRaw.from) / 1000);\n    var timeTo = Math.ceil(dateMath.parse(options.rangeRaw.to) / 1000);\n    var annotation = options.annotation;\n    var showOkEvents = annotation.showOkEvents ? c.SHOW_ALL_EVENTS : c.SHOW_OK_EVENTS;\n\n    // Show all triggers\n    let triggersOptions = {\n      showTriggers: c.SHOW_ALL_TRIGGERS,\n      hideHostsInMaintenance: false\n    };\n\n    var getTriggers = this.zabbix.getTriggers(this.replaceTemplateVars(annotation.group, {}),\n                                              this.replaceTemplateVars(annotation.host, {}),\n                                              this.replaceTemplateVars(annotation.application, {}),\n                                              triggersOptions);\n\n    return getTriggers.then(triggers => {\n\n      // Filter triggers by description\n      let triggerName = this.replaceTemplateVars(annotation.trigger, {});\n      if (utils.isRegex(triggerName)) {\n        triggers = _.filter(triggers, trigger => {\n          return utils.buildRegex(triggerName).test(trigger.description);\n        });\n      } else if (triggerName) {\n        triggers = _.filter(triggers, trigger => {\n          return trigger.description === triggerName;\n        });\n      }\n\n      // Remove events below the chose severity\n      triggers = _.filter(triggers, trigger => {\n        return Number(trigger.priority) >= Number(annotation.minseverity);\n      });\n\n      var objectids = _.map(triggers, 'triggerid');\n      return this.zabbix\n        .getEvents(objectids, timeFrom, timeTo, showOkEvents)\n        .then(events => {\n          var indexedTriggers = _.keyBy(triggers, 'triggerid');\n\n          // Hide acknowledged events if option enabled\n          if (annotation.hideAcknowledged) {\n            events = _.filter(events, event => {\n              return !event.acknowledges.length;\n            });\n          }\n\n          return _.map(events, event => {\n            let tags;\n            if (annotation.showHostname) {\n              tags = _.map(event.hosts, 'name');\n            }\n\n            // Show event type (OK or Problem)\n            let title = Number(event.value) ? 'Problem' : 'OK';\n\n            let formatted_acknowledges = utils.formatAcknowledges(event.acknowledges);\n            return {\n              annotation: annotation,\n              time: event.clock * 1000,\n              title: title,\n              tags: tags,\n              text: indexedTriggers[event.objectid].description + formatted_acknowledges\n            };\n          });\n        });\n    });\n  }\n\n  /**\n   * Get triggers and its details for panel's targets\n   * Returns alert state ('ok' if no fired triggers, or 'alerting' if at least 1 trigger is fired)\n   * or empty object if no related triggers are finded.\n   */\n  alertQuery(options) {\n    let enabled_targets = filterEnabledTargets(options.targets);\n    let getPanelItems = _.map(enabled_targets, t => {\n      let target = _.cloneDeep(t);\n      this.replaceTargetVariables(target, options);\n      return this.zabbix.getItemsFromTarget(target, {itemtype: 'num'});\n    });\n\n    return Promise.all(getPanelItems)\n    .then(results => {\n      let items = _.flatten(results);\n      let itemids = _.map(items, 'itemid');\n\n      if (itemids.length === 0) {\n        return [];\n      }\n      return this.zabbix.getAlerts(itemids);\n    })\n    .then(triggers => {\n      triggers = _.filter(triggers, trigger => {\n        return trigger.priority >= this.alertingMinSeverity;\n      });\n\n      if (!triggers || triggers.length === 0) {\n        return {};\n      }\n\n      let state = 'ok';\n\n      let firedTriggers = _.filter(triggers, {value: '1'});\n      if (firedTriggers.length) {\n        state = 'alerting';\n      }\n\n      let thresholds = _.map(triggers, trigger => {\n        return getTriggerThreshold(trigger.expression);\n      });\n\n      return {\n        panelId: options.panelId,\n        state: state,\n        thresholds: thresholds\n      };\n    });\n  }\n\n  // Replace template variables\n  replaceTargetVariables(target, options) {\n    let parts = ['group', 'host', 'application', 'item'];\n    _.forEach(parts, p => {\n      if (target[p] && target[p].filter) {\n        target[p].filter = this.replaceTemplateVars(target[p].filter, options.scopedVars);\n      }\n    });\n    target.textFilter = this.replaceTemplateVars(target.textFilter, options.scopedVars);\n\n    _.forEach(target.functions, func => {\n      func.params = _.map(func.params, param => {\n        if (typeof param === 'number') {\n          return +this.templateSrv.replace(param.toString(), options.scopedVars);\n        } else {\n          return this.templateSrv.replace(param, options.scopedVars);\n        }\n      });\n    });\n  }\n\n  isUseTrends(timeRange) {\n    let [timeFrom, timeTo] = timeRange;\n    let useTrendsFrom = Math.ceil(dateMath.parse('now-' + this.trendsFrom) / 1000);\n    let useTrendsRange = Math.ceil(utils.parseInterval(this.trendsRange) / 1000);\n    let useTrends = this.trends && (\n      (timeFrom <= useTrendsFrom) ||\n      (timeTo - timeFrom >= useTrendsRange)\n    );\n    return useTrends;\n  }\n}\n\nfunction bindFunctionDefs(functionDefs, category) {\n  var aggregationFunctions = _.map(metricFunctions.getCategories()[category], 'name');\n  var aggFuncDefs = _.filter(functionDefs, function(func) {\n    return _.includes(aggregationFunctions, func.def.name);\n  });\n\n  return _.map(aggFuncDefs, function(func) {\n    var funcInstance = metricFunctions.createFuncInstance(func.def, func.params);\n    return funcInstance.bindFunction(dataProcessor.metricFunctions);\n  });\n}\n\nfunction getConsolidateBy(target) {\n  let consolidateBy = 'avg';\n  let funcDef = _.find(target.functions, func => {\n    return func.def.name === 'consolidateBy';\n  });\n  if (funcDef && funcDef.params && funcDef.params.length) {\n    consolidateBy = funcDef.params[0];\n  }\n  return consolidateBy;\n}\n\nfunction downsampleSeries(timeseries_data, options) {\n  let defaultAgg = dataProcessor.aggregationFunctions['avg'];\n  let consolidateByFunc = dataProcessor.aggregationFunctions[options.consolidateBy] || defaultAgg;\n  return _.map(timeseries_data, timeseries => {\n    if (timeseries.datapoints.length > options.maxDataPoints) {\n      timeseries.datapoints = dataProcessor\n        .groupBy(options.interval, consolidateByFunc, timeseries.datapoints);\n    }\n    return timeseries;\n  });\n}\n\nfunction formatMetric(metricObj) {\n  return {\n    text: metricObj.name,\n    expandable: false\n  };\n}\n\n/**\n * Custom formatter for template variables.\n * Default Grafana \"regex\" formatter returns\n * value1|value2\n * This formatter returns\n * (value1|value2)\n * This format needed for using in complex regex with\n * template variables, for example\n * /CPU $cpu_item.*time/ where $cpu_item is system,user,iowait\n */\nfunction zabbixTemplateFormat(value) {\n  if (typeof value === 'string') {\n    return utils.escapeRegex(value);\n  }\n\n  var escapedValues = _.map(value, utils.escapeRegex);\n  return '(' + escapedValues.join('|') + ')';\n}\n\nfunction zabbixItemIdsTemplateFormat(value) {\n  if (typeof value === 'string') {\n    return value;\n  }\n  return value.join(',');\n}\n\n/**\n * If template variables are used in request, replace it using regex format\n * and wrap with '/' for proper multi-value work. Example:\n * $variable selected as a, b, c\n * We use filter $variable\n * $variable    -> a|b|c    -> /a|b|c/\n * /$variable/  -> /a|b|c/  -> /a|b|c/\n */\nfunction replaceTemplateVars(templateSrv, target, scopedVars) {\n  var replacedTarget = templateSrv.replace(target, scopedVars, zabbixTemplateFormat);\n  if (target !== replacedTarget && !utils.isRegex(replacedTarget)) {\n    replacedTarget = '/^' + replacedTarget + '$/';\n  }\n  return replacedTarget;\n}\n\n// Apply function one by one:\n// sequence([a(), b(), c()]) = c(b(a()));\nfunction sequence(funcsArray) {\n  return function(result) {\n    for (var i = 0; i < funcsArray.length; i++) {\n      result = funcsArray[i].call(this, result);\n    }\n    return result;\n  };\n}\n\nfunction filterEnabledTargets(targets) {\n  return _.filter(targets, target => {\n    return !(target.hide || !target.group || !target.host || !target.item);\n  });\n}\n\nfunction getTriggerThreshold(expression) {\n  let thresholdPattern = /.*[<>=]{1,2}([\\d\\.]+)/;\n  let finded_thresholds = expression.match(thresholdPattern);\n  if (finded_thresholds && finded_thresholds.length >= 2) {\n    let threshold = finded_thresholds[1];\n    threshold = Number(threshold);\n    return threshold;\n  } else {\n    return null;\n  }\n}\n\nexport {ZabbixAPIDatasource, zabbixTemplateFormat};\n\n// Fix for backward compatibility with lodash 2.4\nif (!_.includes) {_.includes = _.contains;}\nif (!_.keyBy) {_.keyBy = _.indexBy;}\n"]}