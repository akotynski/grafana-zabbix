{"version":3,"sources":["../../src/datasource-zabbix/zabbixAlerting.service.js"],"names":["parseThresholds","thresholds","length","sort","a","b","_","$","angular","AUTO_THRESHOLDS_KEYWORD","ZabbixAlertingService","dashboardSrv","dash","meta","fullscreen","panelId","alertState","panelIndex","panelContainers","filter","elem","clientHeight","clientWidth","panelModels","getPanelModels","isFullScreen","findIndex","panel","id","alertClass","removeClass","addClass","flatten","map","rows","row","collapse","panels","find","getPanelModel","type","parsedThresholds","join","maxThreshold","gauge","maxValue","Math","ceil","threshold","containsThreshold","value","thresholdOptions","colorMode","fill","line","lineColor","op","source","push","module","service"],"mappings":"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","file":"zabbixAlerting.service.js","sourcesContent":["import _ from 'lodash';\nimport $ from 'jquery';\nimport angular from 'angular';\n\nconst AUTO_THRESHOLDS_KEYWORD = \"$auto\";\n\nclass ZabbixAlertingService {\n\n  /** @ngInject */\n  constructor(dashboardSrv) {\n    this.dashboardSrv = dashboardSrv;\n  }\n\n  isFullScreen() {\n    return this.dashboardSrv.dash.meta.fullscreen;\n  }\n\n  setPanelAlertState(panelId, alertState) {\n    let panelIndex;\n\n    let panelContainers = _.filter($('.panel-container'), elem => {\n      return elem.clientHeight && elem.clientWidth;\n    });\n\n    let panelModels = this.getPanelModels();\n\n    if (this.isFullScreen()) {\n      panelIndex = 0;\n    } else {\n      panelIndex = _.findIndex(panelModels, panel => {\n        return panel.id === panelId;\n      });\n    }\n\n    if (panelIndex >= 0) {\n      let alertClass = \"panel-has-alert panel-alert-state--ok panel-alert-state--alerting\";\n      $(panelContainers[panelIndex]).removeClass(alertClass);\n\n      if (alertState) {\n        if (alertState === 'alerting') {\n          alertClass = \"panel-has-alert panel-alert-state--\" + alertState;\n          $(panelContainers[panelIndex]).addClass(alertClass);\n        }\n        if (alertState === 'ok') {\n          alertClass = \"panel-alert-state--\" + alertState;\n          $(panelContainers[panelIndex]).addClass(alertClass);\n          $(panelContainers[panelIndex]).removeClass(\"panel-has-alert\");\n        }\n      }\n    }\n  }\n\n  getPanelModels() {\n    return _.flatten(_.map(this.dashboardSrv.dash.rows, row => {\n      if (row.collapse) {\n        return [];\n      } else {\n        return row.panels;\n      }\n    }));\n  }\n\n  getPanelModel(panelId) {\n    let panelModels = this.getPanelModels();\n\n    return _.find(panelModels, panel => {\n      return panel.id === panelId;\n    });\n  }\n\n  setSingleStatThresholds(panelId, thresholds) {\n    if (!thresholds || thresholds.length === 0) {\n      return;\n    }\n\n    let panel = this.getPanelModel(panelId);\n    if (panel && panel.type === \"singlestat\" && panel.thresholds === AUTO_THRESHOLDS_KEYWORD) {\n      let parsedThresholds = parseThresholds(thresholds);\n      panel.thresholds = parsedThresholds.join();\n      let maxThreshold = parsedThresholds[1];\n      panel.gauge.maxValue = Math.ceil(maxThreshold * 1.1);\n    }\n  }\n\n  setPanelThreshold(panelId, threshold) {\n    let panel = this.getPanelModel(panelId);\n    let containsThreshold = _.find(panel.thresholds, {value: threshold});\n\n    if (panel && panel.type === \"graph\" && !containsThreshold) {\n      let thresholdOptions = {\n        colorMode : \"custom\",\n        fill : false,\n        line : true,\n        lineColor: \"rgb(255, 0, 0)\",\n        op: \"gt\",\n        value: threshold,\n        source: \"zabbix\"\n      };\n\n      panel.thresholds.push(thresholdOptions);\n    }\n  }\n\n  removeZabbixThreshold(panelId) {\n    let panel = this.getPanelModel(panelId);\n\n    if (panel && panel.type === \"graph\") {\n      panel.thresholds = _.filter(panel.thresholds, threshold => {\n        return threshold.source !== \"zabbix\";\n      });\n    }\n  }\n\n}\n\nfunction parseThresholds(thresholds) {\n  if(thresholds.length === 1) {\n    return [thresholds[0], thresholds[0]];\n  }\n\n  return [thresholds[0], thresholds[thresholds.length -1]].sort((a, b) => a - b);\n}\n\nangular\n  .module('grafana.services')\n  .service('zabbixAlertingSrv', ZabbixAlertingService);\n"]}