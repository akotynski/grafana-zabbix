{"version":3,"sources":["../../src/datasource-zabbix/zabbixAlerting.service.js"],"names":["setGraphThreshold","panel","threshold","containsThreshold","_","find","thresholds","value","type","thresholdOptions","colorMode","fill","line","lineColor","op","source","push","setAlarmBoxThresholds","thresh","sort","a","b","map","index","array","color","getColor","length","concat","setSingleStatThresholds","AUTO_THRESHOLDS_KEYWORD","parsedThresholds","parseThresholds","join","maxThreshold","gauge","maxValue","Math","ceil","thresholdsCount","scale","g","floor","$","angular","ZabbixAlertingService","dashboardSrv","dash","meta","fullscreen","panelId","alertState","panelIndex","panelContainers","filter","elem","clientHeight","clientWidth","panelModels","getPanelModels","isFullScreen","findIndex","id","alertClass","removeClass","addClass","flatten","rows","row","collapse","panels","getPanelModel","forEach","module","service"],"mappings":"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","file":"zabbixAlerting.service.js","sourcesContent":["import _ from 'lodash';\nimport $ from 'jquery';\nimport angular from 'angular';\n\nconst AUTO_THRESHOLDS_KEYWORD = \"$auto\";\n\nclass ZabbixAlertingService {\n\n  /** @ngInject */\n  constructor(dashboardSrv) {\n    this.dashboardSrv = dashboardSrv;\n  }\n\n  isFullScreen() {\n    return this.dashboardSrv.dash.meta.fullscreen;\n  }\n\n  setPanelAlertState(panelId, alertState) {\n    let panelIndex;\n\n    let panelContainers = _.filter($('.panel-container'), elem => {\n      return elem.clientHeight && elem.clientWidth;\n    });\n\n    let panelModels = this.getPanelModels();\n\n    if (this.isFullScreen()) {\n      panelIndex = 0;\n    } else {\n      panelIndex = _.findIndex(panelModels, panel => {\n        return panel.id === panelId;\n      });\n    }\n\n    if (panelIndex >= 0) {\n      let alertClass = \"panel-has-alert panel-alert-state--ok panel-alert-state--alerting\";\n      $(panelContainers[panelIndex]).removeClass(alertClass);\n\n      if (alertState) {\n        if (alertState === 'alerting') {\n          alertClass = \"panel-has-alert panel-alert-state--\" + alertState;\n          $(panelContainers[panelIndex]).addClass(alertClass);\n        }\n        if (alertState === 'ok') {\n          alertClass = \"panel-alert-state--\" + alertState;\n          $(panelContainers[panelIndex]).addClass(alertClass);\n          $(panelContainers[panelIndex]).removeClass(\"panel-has-alert\");\n        }\n      }\n    }\n  }\n\n  getPanelModels() {\n    return _.flatten(_.map(this.dashboardSrv.dash.rows, row => {\n      if (row.collapse) {\n        return [];\n      } else {\n        return row.panels;\n      }\n    }));\n  }\n\n  getPanelModel(panelId) {\n    let panelModels = this.getPanelModels();\n\n    return _.find(panelModels, panel => {\n      return panel.id === panelId;\n    });\n  }\n\n  setThresholds(panelId, thresholds) {\n    if (!thresholds || thresholds.length === 0) {\n      return;\n    }\n\n    let panel = this.getPanelModel(panelId);\n    if (!panel) {\n      return;\n    }\n\n    thresholds.forEach(threshold => {\n      setGraphThreshold(panel, threshold);\n    });\n\n    setSingleStatThresholds(panel, thresholds);\n    setAlarmBoxThresholds(panel, thresholds);\n  }\n\n  removeZabbixThreshold(panelId) {\n    let panel = this.getPanelModel(panelId);\n\n    if (panel && panel.type === \"graph\") {\n      panel.thresholds = _.filter(panel.thresholds, threshold => {\n        return threshold.source !== \"zabbix\";\n      });\n    }\n  }\n}\n\nfunction setGraphThreshold(panel, threshold) {\n  let containsThreshold = _.find(panel.thresholds, {value: threshold});\n\n  if (panel && panel.type === \"graph\" && !containsThreshold) {\n    let thresholdOptions = {\n      colorMode: \"custom\",\n      fill: false,\n      line: true,\n      lineColor: \"rgb(255, 0, 0)\",\n      op: \"gt\",\n      value: threshold,\n      source: \"zabbix\"\n    };\n\n    panel.thresholds.push(thresholdOptions);\n  }\n}\n\nfunction setAlarmBoxThresholds(panel, thresholds) {\n  if (panel.type === \"btplc-alarm-box-panel\") {\n    let thresh = thresholds.sort((a, b) => a - b)\n      .map((value, index, array) => {\n        return {\n          color: getColor(index, array.length),\n          value: value\n        };\n      });\n    panel.thresholds = panel.thresholds.concat(thresh);\n  }\n}\n\nfunction setSingleStatThresholds(panel, thresholds) {\n  if (panel.type === \"singlestat\" && panel.thresholds === AUTO_THRESHOLDS_KEYWORD) {\n    let parsedThresholds = parseThresholds(thresholds);\n    panel.thresholds = parsedThresholds.join();\n    let maxThreshold = parsedThresholds[1];\n    panel.gauge.maxValue = Math.ceil(maxThreshold * 1.1);\n  }\n}\n\nfunction parseThresholds(thresholds) {\n  if (thresholds.length === 1) {\n    return [thresholds[0], thresholds[0]];\n  }\n\n  return [thresholds[0], thresholds[thresholds.length - 1]].sort((a, b) => a - b);\n}\n\nfunction getColor(index, thresholdsCount) {\n  let scale = 255 / thresholdsCount;\n\n  let g = Math.floor((index + 1) * scale);\n  return `rgb(255, ${255 - g}, 0)`;\n}\n\nangular\n  .module('grafana.services')\n  .service('zabbixAlertingSrv', ZabbixAlertingService);\n"]}